//-*- mode: linum; mode: c++ -*-
/**
 *  CSE 100 PA3 C++ Graph
 *  A class for the graph
 *  Authors: 
 *   Shih-Ting Huang        A92091070
 *   Crystina Callahan  A13070475
 *   UCSD CSE100 staff
 */

/*
 * ActorGraph.cpp
 * Author: <YOUR NAME HERE>
 * Date:   <DATE HERE>
 *
 * This file is meant to exist as a container for starter code that you can use to read the input file format
 * defined in movie_casts.tsv. Feel free to modify any/all aspects as you wish.
 */
 
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include "ActorGraph.h"
#include "BipartiteGraph.h"

using namespace std;

ActorGraph::ActorGraph(void) {}

bool ActorGraph::loadFromFile(const char* in_filename, bool use_weighted_edges) {
    // Initialize the file stream
    ifstream infile(in_filename);

    bool have_header = false;
  
    // keep reading lines until the end of file is reached
    while (infile) {
        string s;
    
        // get the next line
        if (!getline( infile, s )) break;

        if (!have_header) {
            // skip the header
            have_header = true;
            continue;
        }

        istringstream ss( s );
        vector <string> record;

        while (ss) {
            string next;
      
            // get the next string before hitting a tab character and put it in 'next'
            if (!getline( ss, next, '\t' )) break;

            record.push_back( next );
        }
    
        if (record.size() != 3) {
            // we should have exactly 3 columns
            continue;
        }

	string actor_name(     record[0] );
        string movie_title(    record[1] );
        int movie_year = stoi( record[2] );

        // we have an actor/movie relationship, now what?
         // connect actor and movie into graph
        graph.connect(movie_title,movie_year,actor_name);
    }
 
    if (!infile.eof()) {
        cerr << "Failed to read " << in_filename << "!\n";
        return false;
    }
    infile.close();

    return true;
}

string ActorGraph::findPath(string fromKey, string toKey){
  vector<string> v = graph.findPath(fromKey, toKey);
  string s = "";
  if (v.size()<3) return s; //ensure vector size
  
  //format the vector into the string we need
  for (int i=0; i<(v.size()-1); i+=3){
    s+="("+v[i]+")--["+v[i+1]+"#@"+v[i+2]+"]-->";

  }
  s+="("+v[v.size()-1]+")\n";
  //(actor)--[movie#@year]-->

  return s;
}

//Gets the path in a string vector form using dijkstra 
string ActorGraph::findPathW(string fromKey, string toKey){
  vector<string> v = graph.findPathW(fromKey, toKey);
  string s = "";
  if (v.size()<3) return s; //ensure vector size  

  //format the vector into the string we need
  for (int i=0; i<(v.size()-1); i+=3)
    s+="("+v[i]+")--["+v[i+1]+"#@"+v[i+2]+"]-->";
  s+="("+v[v.size()-1]+")\n";
  //(actor)--[movie#@year]-->
  return s;
}

bool ActorGraph::outputFile(const char* out_filename, bool use_weighted_edges) {
    //call BFS or Dijkstra depend on bool use_weight_edges 
    //formate output file 
}

